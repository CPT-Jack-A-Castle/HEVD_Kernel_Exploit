#pragma once

#include "common.h"
#include "IExploit.h"
#include "HevdConstants.h"

typedef struct _PROCESS_ACCESS_TOKEN {
    HANDLE Token;
    HANDLE Thread;
} PROCESS_ACCESS_TOKEN, *PPROCESS_ACCESS_TOKEN;

typedef struct _EPROCESS {
    UCHAR NotNeeded1[0x26C];
    union {
        ULONG Flags2;
        struct {
            ULONG JobNotReallyActive: 1;
            ULONG AccountingFolded: 1;
            ULONG NewProcessReported: 1;
            ULONG ExitProcessReported: 1;
            ULONG ReportCommitChanges: 1;
            ULONG LastReportMemory: 1;
            ULONG ReportPhysicalPageChanges: 1;
            ULONG HandleTableRundown: 1;
            ULONG NeedsHandleRundown: 1;
            ULONG RefTraceEnabled: 1;
            ULONG NumaAware: 1;
            ULONG ProtectedProcess: 1;
            ULONG DefaultPagePriority: 3;
            ULONG PrimaryTokenFrozen: 1;
            ULONG ProcessVerifierTarget: 1;
            ULONG StackRandomizationDisabled: 1;
            ULONG AffinityPermanent: 1;
            ULONG AffinityUpdateEnable: 1;
            ULONG PropagateNode: 1;
            ULONG ExplicitAffinity: 1;
        };
    };
    UCHAR NotNeeded2[0x50];
} EPROCESS, *PEPROCESS;


typedef NTSTATUS (WINAPI *typeZwClose)(
	IN HANDLE 			hObject
);

typedef PEPROCESS (WINAPI *typePsGetCurrentProcess)();

typedef PACCESS_TOKEN (WINAPI *typePsReferencePrimaryToken)(IN OUT PVOID Process);

typedef NTSTATUS (WINAPI *typeZwOpenProcessToken)(
	IN HANDLE      		ProcessHandle,
	IN ACCESS_MASK 		DesiredAccess,
	OUT PHANDLE    		TokenHandle
);
                                                
typedef NTSTATUS (WINAPI *typeZwSetInformationProcess)(
	IN HANDLE 			hProcess,
	IN ULONG  			ProcessInfoClass,
	IN PVOID  			ProcessInfo,
	IN ULONG  			ProcessInfoLength);

typedef NTSTATUS (WINAPI *typeZwOpenProcess)(
	OUT PHANDLE         ProcessHandle,
	IN ACCESS_MASK      DesiredAccess,
	IN POBJECT_ATTRIBUTES ObjectAttributes,
	IN PCLIENT_ID		ClientId OPTIONAL
);

typedef NTSTATUS (WINAPI *typePsLookupProcessByProcessId)(
	IN HANDLE ProcessId,
    OUT PVOID Process
);

typedef NTSTATUS (WINAPI *typeObDerefenceObject)(
	IN PVOID Object
);
	
typedef NTSTATUS (WINAPI *typeZwDuplicateToken)(
	IN HANDLE           ExistingTokenHandle,
	IN ACCESS_MASK      DesiredAccess,
	IN POBJECT_ATTRIBUTES ObjectAttributes,
	IN BOOLEAN          EffectiveOnly,
	IN TOKEN_TYPE       TokenType,
	OUT PHANDLE         NewTokenHandle
);

typedef NTSTATUS (WINAPI *typeZwTerminateProcess)(
	IN HANDLE 			ProcessHandle,
	IN NTSTATUS 		ExitStatus
);


class ExploitStackOverflowGS : public IExploit {
	static constexpr wchar_t *Exploit_Name = L"Stack Overflow GS";
	static constexpr DWORD Ioctl_Code = HACKSYS_EVD_IOCTL_STACK_OVERFLOW_GS;
	
public:
	ExploitStackOverflowGS(Driver& driver) : IExploit(driver) {}
	virtual ~ExploitStackOverflowGS() {}
	
	virtual const wchar_t* getName() const { 
		return ExploitStackOverflowGS::Exploit_Name;
	};
	
	virtual DWORD getIoctlCode() const {
		return ExploitStackOverflowGS::Ioctl_Code;
	}
	
	virtual bool exploit();
	
	bool resolveKernelApis();
	static NTSTATUS ElevatePrivilegesPayload();
};
