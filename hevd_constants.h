#pragma once

#include <string>
#include <map>


enum IOCTL_CODES {
	HACKSYS_EVD_IOCTL_STACK_OVERFLOW              	  = CTL_CODE(FILE_DEVICE_UNKNOWN, 0x800, METHOD_NEITHER, FILE_ANY_ACCESS),
	HACKSYS_EVD_IOCTL_STACK_OVERFLOW_GS               = CTL_CODE(FILE_DEVICE_UNKNOWN, 0x801, METHOD_NEITHER, FILE_ANY_ACCESS),
	HACKSYS_EVD_IOCTL_ARBITRARY_OVERWRITE             = CTL_CODE(FILE_DEVICE_UNKNOWN, 0x802, METHOD_NEITHER, FILE_ANY_ACCESS),
	HACKSYS_EVD_IOCTL_POOL_OVERFLOW                   = CTL_CODE(FILE_DEVICE_UNKNOWN, 0x803, METHOD_NEITHER, FILE_ANY_ACCESS),
	HACKSYS_EVD_IOCTL_ALLOCATE_UAF_OBJECT             = CTL_CODE(FILE_DEVICE_UNKNOWN, 0x804, METHOD_NEITHER, FILE_ANY_ACCESS),
	HACKSYS_EVD_IOCTL_USE_UAF_OBJECT                  = CTL_CODE(FILE_DEVICE_UNKNOWN, 0x805, METHOD_NEITHER, FILE_ANY_ACCESS),
	HACKSYS_EVD_IOCTL_FREE_UAF_OBJECT                 = CTL_CODE(FILE_DEVICE_UNKNOWN, 0x806, METHOD_NEITHER, FILE_ANY_ACCESS),
	HACKSYS_EVD_IOCTL_ALLOCATE_FAKE_OBJECT            = CTL_CODE(FILE_DEVICE_UNKNOWN, 0x807, METHOD_NEITHER, FILE_ANY_ACCESS),
	HACKSYS_EVD_IOCTL_TYPE_CONFUSION                  = CTL_CODE(FILE_DEVICE_UNKNOWN, 0x808, METHOD_NEITHER, FILE_ANY_ACCESS),
	HACKSYS_EVD_IOCTL_INTEGER_OVERFLOW                = CTL_CODE(FILE_DEVICE_UNKNOWN, 0x809, METHOD_NEITHER, FILE_ANY_ACCESS),
	HACKSYS_EVD_IOCTL_NULL_POINTER_DEREFERENCE        = CTL_CODE(FILE_DEVICE_UNKNOWN, 0x80A, METHOD_NEITHER, FILE_ANY_ACCESS),
	HACKSYS_EVD_IOCTL_UNINITIALIZED_STACK_VARIABLE    = CTL_CODE(FILE_DEVICE_UNKNOWN, 0x80B, METHOD_NEITHER, FILE_ANY_ACCESS),
	HACKSYS_EVD_IOCTL_UNINITIALIZED_HEAP_VARIABLE     = CTL_CODE(FILE_DEVICE_UNKNOWN, 0x80C, METHOD_NEITHER, FILE_ANY_ACCESS),
	HACKSYS_EVD_IOCTL_DOUBLE_FETCH                    = CTL_CODE(FILE_DEVICE_UNKNOWN, 0x80D, METHOD_NEITHER, FILE_ANY_ACCESS)
};

map<DWORD, const wstring&> g_ioctlCodeNames {
	{ IOCTL_CODES(HACKSYS_EVD_IOCTL_STACK_OVERFLOW), 				L"HACKSYS_EVD_IOCTL_STACK_OVERFLOW"					},
	{ IOCTL_CODES(HACKSYS_EVD_IOCTL_STACK_OVERFLOW_GS), 			L"HACKSYS_EVD_IOCTL_STACK_OVERFLOW_GS"				},
	{ IOCTL_CODES(HACKSYS_EVD_IOCTL_ARBITRARY_OVERWRITE), 			L"HACKSYS_EVD_IOCTL_ARBITRARY_OVERWRITE"			},
	{ IOCTL_CODES(HACKSYS_EVD_IOCTL_POOL_OVERFLOW),                 L"HACKSYS_EVD_IOCTL_POOL_OVERFLOW"					},
	{ IOCTL_CODES(HACKSYS_EVD_IOCTL_ALLOCATE_UAF_OBJECT), 			L"HACKSYS_EVD_IOCTL_ALLOCATE_UAF_OBJECT"			},
	{ IOCTL_CODES(HACKSYS_EVD_IOCTL_USE_UAF_OBJECT), 				L"HACKSYS_EVD_IOCTL_USE_UAF_OBJECT"					},
	{ IOCTL_CODES(HACKSYS_EVD_IOCTL_FREE_UAF_OBJECT), 				L"HACKSYS_EVD_IOCTL_FREE_UAF_OBJECT"				},
	{ IOCTL_CODES(HACKSYS_EVD_IOCTL_ALLOCATE_FAKE_OBJECT), 			L"HACKSYS_EVD_IOCTL_ALLOCATE_FAKE_OBJECT"			},
	{ IOCTL_CODES(HACKSYS_EVD_IOCTL_TYPE_CONFUSION), 				L"HACKSYS_EVD_IOCTL_TYPE_CONFUSION"					},
	{ IOCTL_CODES(HACKSYS_EVD_IOCTL_INTEGER_OVERFLOW), 				L"HACKSYS_EVD_IOCTL_INTEGER_OVERFLOW"				},
	{ IOCTL_CODES(HACKSYS_EVD_IOCTL_NULL_POINTER_DEREFERENCE), 		L"HACKSYS_EVD_IOCTL_NULL_POINTER_DEREFERENCE"		},
	{ IOCTL_CODES(HACKSYS_EVD_IOCTL_UNINITIALIZED_STACK_VARIABLE), 	L"HACKSYS_EVD_IOCTL_UNINITIALIZED_STACK_VARIABLE"	},
	{ IOCTL_CODES(HACKSYS_EVD_IOCTL_UNINITIALIZED_HEAP_VARIABLE), 	L"HACKSYS_EVD_IOCTL_UNINITIALIZED_HEAP_VARIABLE"	},
	{ IOCTL_CODES(HACKSYS_EVD_IOCTL_DOUBLE_FETCH), 					L"HACKSYS_EVD_IOCTL_DOUBLE_FETCH" 					}
};

const wstring& Vulnerable_Driver_Name 			= L"HackSysExtremeVulnerableDriver";
const wstring& Vulnerable_Driver_Module_Name 	= L"HEVD";
