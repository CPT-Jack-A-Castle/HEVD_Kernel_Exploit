#pragma once

#include "common.h"

typedef std::map<DWORD, const wchar_t*> IoctlNamesMap;

class Driver {
	const wstring& 			driverName;
	shared_ptr<HANDLE> 		driverHandle;
	DWORD					driverImageBase;
	DWORD					lastError;
	const IoctlNamesMap*	ioctlNamesMap;
	
public:
	Driver(
		const wstring& driverName, 
		const wstring& alternativeDrvName = L"",
		const IoctlNamesMap* ioctlNames = nullptr
	);
	~Driver();
	
	static DWORD GetModuleImageBase( const wstring &imageNameParam);
	
	operator!() {
		return (lastError != ERROR_SUCCESS);
	}
	
	DWORD getError() { 
		return lastError;
	}
	
	const wchar_t* getErrorString();
	
	bool SendIOCTL(
		DWORD ioctlCode, LPVOID inputBuffer, DWORD inputSize, 
		LPVOID outputBuffer = nullptr, DWORD outSize = 0, LPDWORD writtenBytes = nullptr
	);
};
